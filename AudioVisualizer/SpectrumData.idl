import "EnumTypes.idl";

namespace AudioVisualizer
{
	[default_interface]
	runtimeclass SpectrumData : Windows.Foundation.Collections.IVectorView< Windows.Foundation.Collections.IVectorView<Single> >, Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IVectorView<Single> >
	{
		ScaleType AmplitudeScale { get; };
		ScaleType FrequencyScale{ get; };
		Single MinFrequency{ get; };
		Single MaxFrequency{ get; };
		Single FrequencyStep{ get; };
		UInt32 FrequencyCount{ get; };

		SpectrumData LinearTransform(UInt32 elementCount,Single fromFrequency,Single toFrequency);
		SpectrumData LogarithmicTransform(UInt32 elementCount,Single fromFrequency,Single toFrequency);
		SpectrumData ApplyRiseAndFall(SpectrumData previous,Windows.Foundation.TimeSpan riseTime,Windows.Foundation.TimeSpan fallTime,Windows.Foundation.TimeSpan timeFromPrevious);
		SpectrumData ConvertToDecibels(Single minValue,Single maxValue);
		SpectrumData CombineChannels(Single [] map);
		Single GetFrequency(UInt32 elementIndex);
		Single GetCenterFrequency(UInt32 elementIndex);

		static SpectrumData CreateEmpty(UInt32 cChannels, UInt32 cElements, ScaleType amplitudeScale, ScaleType frequencyScale, Single minFrequency, Single maxFrequency);
		static SpectrumData Create(Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IVectorView<Single> > values, ScaleType amplitudeScale, ScaleType frequencyScale, Single minFrequency, Single maxFrequency);
		static SpectrumData ApplyRiseAndFallToEmpty(SpectrumData previous, Windows.Foundation.TimeSpan riseTime, Windows.Foundation.TimeSpan fallTime, Windows.Foundation.TimeSpan timeFromPrevious);
	}
}